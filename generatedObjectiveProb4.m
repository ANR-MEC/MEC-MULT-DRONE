function [obj, grad] = generatedObjectiveProb4(inputVariables, extraParams)
%generatedObjectiveProb4 Compute objective function value and gradient
%
%   OBJ = generatedObjectiveProb4(INPUTVARIABLES, EXTRAPARAMS) computes
%   the objective value OBJ at the point INPUTVARIABLES, using the extra
%   parameters in EXTRAPARAMS.
%
%   [OBJ, GRAD] = generatedObjectiveProb4(INPUTVARIABLES, EXTRAPARAMS)
%   additionally computes the objective gradient value GRAD at the current
%   point.
%
%   Auto-generated by prob2struct on 01-Aug-2024 15:11:32

import optim.problemdef.gradients.divide.*;
import optim.problemdef.gradients.sum.*;


%% Variable indices.
Bidx = 1:1280;
qidx = 1281:1440;
tidx = 1441:2720;
v_baridx = 2721:2796;

%% Map solver-based variables to problem-based.
B = reshape(inputVariables(Bidx), [4, 16, 20]);
q = reshape(inputVariables(qidx), [4, 2, 20]);
t = reshape(inputVariables(tidx), [4, 16, 20]);
v_bar = reshape(inputVariables(v_baridx), [4, 19]);


%% Compute objective function.
arg4556 = extraParams{1};
arg4561 = extraParams{2};
arg4566 = extraParams{3};
arg4571 = extraParams{4};
arg4576 = extraParams{5};
arg4581 = extraParams{6};
arg4586 = extraParams{7};
arg4591 = extraParams{8};
arg4596 = extraParams{9};
arg4601 = extraParams{10};
arg4606 = extraParams{11};
arg4611 = extraParams{12};
arg4616 = extraParams{13};
arg4621 = extraParams{14};
arg4626 = extraParams{15};
arg4631 = extraParams{16};
arg4636 = extraParams{17};
arg4641 = extraParams{18};
arg4646 = extraParams{19};
arg4649 = extraParams{21};
arg4651 = extraParams{22};
arg4652 = extraParams{23};
arg4647 = zeros(4, 19);
arg4554 = (reshape(q(9:16), [4, 2]) - reshape(q(1:8), [4, 2]));
arg4555 = sum(arg4554.^2, 2);
arg4559 = (reshape(q(17:24), [4, 2]) - reshape(q(9:16), [4, 2]));
arg4560 = sum(arg4559.^2, 2);
arg4564 = (reshape(q(25:32), [4, 2]) - reshape(q(17:24), [4, 2]));
arg4565 = sum(arg4564.^2, 2);
arg4569 = (reshape(q(33:40), [4, 2]) - reshape(q(25:32), [4, 2]));
arg4570 = sum(arg4569.^2, 2);
arg4574 = (reshape(q(41:48), [4, 2]) - reshape(q(33:40), [4, 2]));
arg4575 = sum(arg4574.^2, 2);
arg4579 = (reshape(q(49:56), [4, 2]) - reshape(q(41:48), [4, 2]));
arg4580 = sum(arg4579.^2, 2);
arg4584 = (reshape(q(57:64), [4, 2]) - reshape(q(49:56), [4, 2]));
arg4585 = sum(arg4584.^2, 2);
arg4589 = (reshape(q(65:72), [4, 2]) - reshape(q(57:64), [4, 2]));
arg4590 = sum(arg4589.^2, 2);
arg4594 = (reshape(q(73:80), [4, 2]) - reshape(q(65:72), [4, 2]));
arg4595 = sum(arg4594.^2, 2);
arg4599 = (reshape(q(81:88), [4, 2]) - reshape(q(73:80), [4, 2]));
arg4600 = sum(arg4599.^2, 2);
arg4604 = (reshape(q(89:96), [4, 2]) - reshape(q(81:88), [4, 2]));
arg4605 = sum(arg4604.^2, 2);
arg4609 = (reshape(q(97:104), [4, 2]) - reshape(q(89:96), [4, 2]));
arg4610 = sum(arg4609.^2, 2);
arg4614 = (reshape(q(105:112), [4, 2]) - reshape(q(97:104), [4, 2]));
arg4615 = sum(arg4614.^2, 2);
arg4619 = (reshape(q(113:120), [4, 2]) - reshape(q(105:112), [4, 2]));
arg4620 = sum(arg4619.^2, 2);
arg4624 = (reshape(q(121:128), [4, 2]) - reshape(q(113:120), [4, 2]));
arg4625 = sum(arg4624.^2, 2);
arg4629 = (reshape(q(129:136), [4, 2]) - reshape(q(121:128), [4, 2]));
arg4630 = sum(arg4629.^2, 2);
arg4634 = (reshape(q(137:144), [4, 2]) - reshape(q(129:136), [4, 2]));
arg4635 = sum(arg4634.^2, 2);
arg4639 = (reshape(q(145:152), [4, 2]) - reshape(q(137:144), [4, 2]));
arg4640 = sum(arg4639.^2, 2);
arg4644 = (reshape(q(153:160), [4, 2]) - reshape(q(145:152), [4, 2]));
arg4645 = sum(arg4644.^2, 2);
arg4647(1:4) = (arg4555 ./ arg4556);
arg4647(5:8) = (arg4560 ./ arg4561);
arg4647(9:12) = (arg4565 ./ arg4566);
arg4647(13:16) = (arg4570 ./ arg4571);
arg4647(17:20) = (arg4575 ./ arg4576);
arg4647(21:24) = (arg4580 ./ arg4581);
arg4647(25:28) = (arg4585 ./ arg4586);
arg4647(29:32) = (arg4590 ./ arg4591);
arg4647(33:36) = (arg4595 ./ arg4596);
arg4647(37:40) = (arg4600 ./ arg4601);
arg4647(41:44) = (arg4605 ./ arg4606);
arg4647(45:48) = (arg4610 ./ arg4611);
arg4647(49:52) = (arg4615 ./ arg4616);
arg4647(53:56) = (arg4620 ./ arg4621);
arg4647(57:60) = (arg4625 ./ arg4626);
arg4647(61:64) = (arg4630 ./ arg4631);
arg4647(65:68) = (arg4635 ./ arg4636);
arg4647(69:72) = (arg4640 ./ arg4641);
arg4647(73:76) = (arg4645 ./ arg4646);
arg4648 = reshape(arg4647, [4, 19]);
arg4650 = arg4648.^extraParams{20};
arg4653 = ((arg4649 .* arg4650) + (arg4651 ./ v_bar));
obj = sum(sum((arg4652 .* arg4653)));

if nargout > 1
    %% Compute objective gradient.
    % To call the gradient code, notify the solver by setting the
    % SpecifyObjectiveGradient option to true.
    arg4752 = zeros(2796, 1);
    qjac = sparse(160, 1);
    v_barjac = sparse(76, 1);
    arg4654 = (SumJacobian([4 19], 1) * (SumJacobian([1 19], 2) * 1));
    arg4655 = (arg4654.*arg4652(:));
    v_barjac = v_barjac + DivideRightJacobian(arg4651, v_bar)*arg4655;
    arg4656 = ((arg4655.*arg4649(:)).*(extraParams{20}.*arg4648(:).^(extraParams{20}-1)));
    arg4657 = arg4656(73:76,:);
    arg4658 = ((SumJacobian([4 2], 2) * DivideLeftJacobian(arg4646)*arg4657).*2.*(arg4644(:)));
    arg4659 = (-arg4658);
    arg4660 = sparse(160, 1);
    arg4660(145:152,:) = arg4659;
    qjac = qjac + arg4660;
    arg4661 = sparse(160, 1);
    arg4661(153:160,:) = arg4658;
    qjac = qjac + arg4661;
    arg4662 = arg4656(69:72,:);
    arg4663 = ((SumJacobian([4 2], 2) * DivideLeftJacobian(arg4641)*arg4662).*2.*(arg4639(:)));
    arg4664 = (-arg4663);
    arg4665 = sparse(160, 1);
    arg4665(137:144,:) = arg4664;
    qjac = qjac + arg4665;
    arg4666 = sparse(160, 1);
    arg4666(145:152,:) = arg4663;
    qjac = qjac + arg4666;
    arg4667 = arg4656(65:68,:);
    arg4668 = ((SumJacobian([4 2], 2) * DivideLeftJacobian(arg4636)*arg4667).*2.*(arg4634(:)));
    arg4669 = (-arg4668);
    arg4670 = sparse(160, 1);
    arg4670(129:136,:) = arg4669;
    qjac = qjac + arg4670;
    arg4671 = sparse(160, 1);
    arg4671(137:144,:) = arg4668;
    qjac = qjac + arg4671;
    arg4672 = arg4656(61:64,:);
    arg4673 = ((SumJacobian([4 2], 2) * DivideLeftJacobian(arg4631)*arg4672).*2.*(arg4629(:)));
    arg4674 = (-arg4673);
    arg4675 = sparse(160, 1);
    arg4675(121:128,:) = arg4674;
    qjac = qjac + arg4675;
    arg4676 = sparse(160, 1);
    arg4676(129:136,:) = arg4673;
    qjac = qjac + arg4676;
    arg4677 = arg4656(57:60,:);
    arg4678 = ((SumJacobian([4 2], 2) * DivideLeftJacobian(arg4626)*arg4677).*2.*(arg4624(:)));
    arg4679 = (-arg4678);
    arg4680 = sparse(160, 1);
    arg4680(113:120,:) = arg4679;
    qjac = qjac + arg4680;
    arg4681 = sparse(160, 1);
    arg4681(121:128,:) = arg4678;
    qjac = qjac + arg4681;
    arg4682 = arg4656(53:56,:);
    arg4683 = ((SumJacobian([4 2], 2) * DivideLeftJacobian(arg4621)*arg4682).*2.*(arg4619(:)));
    arg4684 = (-arg4683);
    arg4685 = sparse(160, 1);
    arg4685(105:112,:) = arg4684;
    qjac = qjac + arg4685;
    arg4686 = sparse(160, 1);
    arg4686(113:120,:) = arg4683;
    qjac = qjac + arg4686;
    arg4687 = arg4656(49:52,:);
    arg4688 = ((SumJacobian([4 2], 2) * DivideLeftJacobian(arg4616)*arg4687).*2.*(arg4614(:)));
    arg4689 = (-arg4688);
    arg4690 = sparse(160, 1);
    arg4690(97:104,:) = arg4689;
    qjac = qjac + arg4690;
    arg4691 = sparse(160, 1);
    arg4691(105:112,:) = arg4688;
    qjac = qjac + arg4691;
    arg4692 = arg4656(45:48,:);
    arg4693 = ((SumJacobian([4 2], 2) * DivideLeftJacobian(arg4611)*arg4692).*2.*(arg4609(:)));
    arg4694 = (-arg4693);
    arg4695 = sparse(160, 1);
    arg4695(89:96,:) = arg4694;
    qjac = qjac + arg4695;
    arg4696 = sparse(160, 1);
    arg4696(97:104,:) = arg4693;
    qjac = qjac + arg4696;
    arg4697 = arg4656(41:44,:);
    arg4698 = ((SumJacobian([4 2], 2) * DivideLeftJacobian(arg4606)*arg4697).*2.*(arg4604(:)));
    arg4699 = (-arg4698);
    arg4700 = sparse(160, 1);
    arg4700(81:88,:) = arg4699;
    qjac = qjac + arg4700;
    arg4701 = sparse(160, 1);
    arg4701(89:96,:) = arg4698;
    qjac = qjac + arg4701;
    arg4702 = arg4656(37:40,:);
    arg4703 = ((SumJacobian([4 2], 2) * DivideLeftJacobian(arg4601)*arg4702).*2.*(arg4599(:)));
    arg4704 = (-arg4703);
    arg4705 = sparse(160, 1);
    arg4705(73:80,:) = arg4704;
    qjac = qjac + arg4705;
    arg4706 = sparse(160, 1);
    arg4706(81:88,:) = arg4703;
    qjac = qjac + arg4706;
    arg4707 = arg4656(33:36,:);
    arg4708 = ((SumJacobian([4 2], 2) * DivideLeftJacobian(arg4596)*arg4707).*2.*(arg4594(:)));
    arg4709 = (-arg4708);
    arg4710 = sparse(160, 1);
    arg4710(65:72,:) = arg4709;
    qjac = qjac + arg4710;
    arg4711 = sparse(160, 1);
    arg4711(73:80,:) = arg4708;
    qjac = qjac + arg4711;
    arg4712 = arg4656(29:32,:);
    arg4713 = ((SumJacobian([4 2], 2) * DivideLeftJacobian(arg4591)*arg4712).*2.*(arg4589(:)));
    arg4714 = (-arg4713);
    arg4715 = sparse(160, 1);
    arg4715(57:64,:) = arg4714;
    qjac = qjac + arg4715;
    arg4716 = sparse(160, 1);
    arg4716(65:72,:) = arg4713;
    qjac = qjac + arg4716;
    arg4717 = arg4656(25:28,:);
    arg4718 = ((SumJacobian([4 2], 2) * DivideLeftJacobian(arg4586)*arg4717).*2.*(arg4584(:)));
    arg4719 = (-arg4718);
    arg4720 = sparse(160, 1);
    arg4720(49:56,:) = arg4719;
    qjac = qjac + arg4720;
    arg4721 = sparse(160, 1);
    arg4721(57:64,:) = arg4718;
    qjac = qjac + arg4721;
    arg4722 = arg4656(21:24,:);
    arg4723 = ((SumJacobian([4 2], 2) * DivideLeftJacobian(arg4581)*arg4722).*2.*(arg4579(:)));
    arg4724 = (-arg4723);
    arg4725 = sparse(160, 1);
    arg4725(41:48,:) = arg4724;
    qjac = qjac + arg4725;
    arg4726 = sparse(160, 1);
    arg4726(49:56,:) = arg4723;
    qjac = qjac + arg4726;
    arg4727 = arg4656(17:20,:);
    arg4728 = ((SumJacobian([4 2], 2) * DivideLeftJacobian(arg4576)*arg4727).*2.*(arg4574(:)));
    arg4729 = (-arg4728);
    arg4730 = sparse(160, 1);
    arg4730(33:40,:) = arg4729;
    qjac = qjac + arg4730;
    arg4731 = sparse(160, 1);
    arg4731(41:48,:) = arg4728;
    qjac = qjac + arg4731;
    arg4732 = arg4656(13:16,:);
    arg4733 = ((SumJacobian([4 2], 2) * DivideLeftJacobian(arg4571)*arg4732).*2.*(arg4569(:)));
    arg4734 = (-arg4733);
    arg4735 = sparse(160, 1);
    arg4735(25:32,:) = arg4734;
    qjac = qjac + arg4735;
    arg4736 = sparse(160, 1);
    arg4736(33:40,:) = arg4733;
    qjac = qjac + arg4736;
    arg4737 = arg4656(9:12,:);
    arg4738 = ((SumJacobian([4 2], 2) * DivideLeftJacobian(arg4566)*arg4737).*2.*(arg4564(:)));
    arg4739 = (-arg4738);
    arg4740 = sparse(160, 1);
    arg4740(17:24,:) = arg4739;
    qjac = qjac + arg4740;
    arg4741 = sparse(160, 1);
    arg4741(25:32,:) = arg4738;
    qjac = qjac + arg4741;
    arg4742 = arg4656(5:8,:);
    arg4743 = ((SumJacobian([4 2], 2) * DivideLeftJacobian(arg4561)*arg4742).*2.*(arg4559(:)));
    arg4744 = (-arg4743);
    arg4745 = sparse(160, 1);
    arg4745(9:16,:) = arg4744;
    qjac = qjac + arg4745;
    arg4746 = sparse(160, 1);
    arg4746(17:24,:) = arg4743;
    qjac = qjac + arg4746;
    arg4747 = arg4656(1:4,:);
    arg4748 = ((SumJacobian([4 2], 2) * DivideLeftJacobian(arg4556)*arg4747).*2.*(arg4554(:)));
    arg4749 = (-arg4748);
    arg4750 = sparse(160, 1);
    arg4750(1:8,:) = arg4749;
    qjac = qjac + arg4750;
    arg4751 = sparse(160, 1);
    arg4751(9:16,:) = arg4748;
    qjac = qjac + arg4751;
    arg4752(qidx,:) = qjac;
    arg4752(v_baridx,:) = v_barjac;
    grad = arg4752(:);
end
end